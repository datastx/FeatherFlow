name: Build and Release Binaries

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v0.1.0)'
        required: true
        default: 'v0.1.0'

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: ff
            asset_name: featherflow-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: ff
            asset_name: featherflow-linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: ff.exe
            asset_name: featherflow-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: ff
            asset_name: featherflow-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: ff
            asset_name: featherflow-macos-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          components: rustfmt, clippy
          override: true
      
      - name: Verify target installation
        run: |
          rustup target list --installed

      - name: Install cross-compilation dependencies
        run: |
          sudo apt-get update
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          elif [[ "${{ matrix.target }}" == "x86_64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-multilib g++-multilib
          fi

      # Run checks on ubuntu-latest target only (to avoid redundant checks)
      - name: Check code formatting
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: make check-fmt

      - name: Run clippy linter
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: make clippy

      - name: Run tests
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: make test

      # Build the binary for the appropriate target
      - name: Build release binary
        run: |
          # On each runner we're building for its native architecture or using cross-compilation if needed
          if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            # Cross-compile for ARM64 on x86 Linux
            make target-aarch64-linux
          else
            # Native or compatible compilation
            make target-release TARGET=${{ matrix.target }}
          fi

      - name: Prepare binary artifact
        run: |
          make prepare-binary TARGET=${{ matrix.target }} BINARY_NAME=${{ matrix.binary_name }} ASSET_NAME=${{ matrix.asset_name }}
          # List artifacts directory contents for debugging
          ls -la artifacts/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: artifacts/${{ matrix.asset_name }}
          if-no-files-found: error

  # Store artifacts for main/master builds (without creating a release)
  archive-artifacts:
    name: Archive Artifacts
    needs: build
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && !startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Collect artifacts
        run: |
          mkdir -p all-binaries
          find . -type f -not -path "./all-binaries/*" -exec cp {} all-binaries/ \;
          ls -la all-binaries/
          
      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: featherflow-all-binaries
          path: all-binaries/
          retention-days: 14
          
  release:
    name: Create Release
    needs: build
    # Only run this job if we have a tag or it's manually triggered
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        run: |
          find . -type f -not -path "*/\.*" | sort
          echo "==========="
          ls -la */*/

      - name: Get version tag
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: FeatherFlow ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ./*-linux-amd64/featherflow-linux-amd64
            ./*-linux-arm64/featherflow-linux-arm64
            ./*-windows-amd64.exe/featherflow-windows-amd64.exe
            ./*-macos-amd64/featherflow-macos-amd64
            ./*-macos-arm64/featherflow-macos-arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}